#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @File  : generate_html.py
# @Author: changfeng.jian
# @Date  : 2018/10/10 23:01
# @Desc  : 
import argparse
import csv
import datetime
import fileinput
import os
import re

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<body>
    <table border=1  width=60%>
    <tr align=center bgcolor=#FFCC66><th colspan=10>{subject}</th></tr>
    <!--ADD_NEW_MODULE-->
    </table>

<hr />
<cite>Autogenerated on: timestamp </cite>

</body>
</html>

"""


def insert_after(file_path, re_string, add_strings):
    """
    Insert strings after the line which match specified regular expression

    :param file_path: file path
    :param re_string: regular expression
    :param add_strings: strings that inserted after specified line
    :return None
    """

    pattern = re.compile(re_string)
    if os.path.exists(file_path):
        print file_path
        pass
    else:
        raise Exception("file %s is not found" % file_path)

    for line in fileinput.input(file_path, inplace=1):
        line = line.strip()
        match = pattern.match(line)
        if match:

            print add_strings
            print line
        else:
            print line


def get_csv_data(csv_path):
    data_list = []
    if os.path.exists(csv_path):
        pass
    else:
        raise Exception("file %s is not found" % csv_path)

    csv_fd = csv.reader(open(csv_path, "rU"))
    first_flag = False
    second_flag = False
    subject = []
    lable = []
    data = []

    for line in csv_fd:
        if line:
            if len(line) == 1:
                if not first_flag:
                    first_flag = True
                else:
                    data_list.append((subject, lable, data))
                    second_flag = False

                subject = line[0]
                lable = []
                data = []

            elif len(line) > 1 and first_flag and not second_flag:
                second_flag = True
                lable = line
            else:
                data.append(line)
    data_list.append((subject, lable, data))
    return data_list


def write_html(dst, csv_list, subject="System Test Report"):
    with open(dst, "w") as fd:
        fd.writelines(HTML_TEMPLATE.format(subject=subject))

    for csv_file in csv_list:
        csv_data = get_csv_data(csv_file)
        result_str = ""
        for item in csv_data:
            title = item[0]
            lable = item[1]
            data = item[2]
            # add title
            result_str += "<table border=1 cellspacing=0  width=60%>\n"
            if title == "Test summary":
                result_str += "<tr align=left><th colspan=10 bgcolor=CCCC99>{title}</th></tr>\n".format(title=title)
                if lable:
                    result_str += "<tr align=center>\n"
                    for i in lable:
                        result_str += "<th>{lable}</th>\n".format(lable=i)
                    result_str += " </tr>\n"
                if data:
                    step = 6
                    for x in range(0, len(data)/2):
                        v = [data[x], data[x+step]]
                        for k, subv in enumerate(v):
                            result_str += "<tr align=center>\n"
                            if k == 0:
                                result_str += '<td rowspan="{}" align="center">{}</td>'.format(2, subv[0])
                                for j in subv[1:]:
                                    if re.match("(http://.*|https://.*)", j.strip(), re.I):
                                        result_str += "<td><font size=\"-1\"><a href={value}>link</a></font><br/></td>\n".format(
                                            value=j)
                                    else:
                                        result_str += "<td><font size=\"-1\">{value}</font><br/></td>\n".format(value=j)
                            else:
                                for j in subv[1:]:
                                    if re.match("(http://.*|https://.*)", j.strip(), re.I):
                                        result_str += "<td><font size=\"-1\"><a href={value}>link</a></font><br/></td>\n".format(
                                            value=j)
                                    else:
                                        result_str += "<td><font size=\"-1\">{value}</font><br/></td>\n".format(value=j)
                            result_str += " </tr>\n"
            else:
                result_str += "<table border=1 cellspacing=0  width=60%>\n"
                if title:
                    result_str += "<tr align=left><th colspan=10 bgcolor=CCCC99>{title}</th></tr>\n".format(title=title)
                if lable:
                    result_str += "<tr align=center>\n"
                    for i in lable:
                        result_str += "<th>{lable}</th>\n".format(lable=i)
                    result_str += " </tr>\n"
                if data:
                    for i in data:
                        result_str += "<tr align=center>\n"
                        # result_str += "<tr>\n"
                        new = []
                        if len(lable) == len(i):
                            new = i
                            pass
                        elif len(lable) < len(i):

                            cnt = len(i) - len(lable)
                            for j in enumerate(i[::-1]):

                                if "http://" in j[1].lower() or "https://" in j[1].lower() and j[0] > 1 and cnt > 0:
                                    pop = new.pop(j[0] - 1)
                                    new.append(j[1] + ',' + pop)
                                    cnt -= 1
                                else:
                                    new.append(j[1])
                            new.reverse()

                        if "Issue List" in title:
                            for j in new:
                                if re.match(r"(http://.*|https://.*)", j.strip(), re.I):
                                    result_str += "<td><font size=\"-1\"><a href={value}>link</a></font><br/></td>\n".format(
                                        value=j)
                                else:
                                    if "Description" in lable and new.index(j) == 1:
                                        result_str += "<td align=left><font size=\"-1\">{value}</font><br/></td>\n".format(
                                            value=j)
                                    else:
                                        result_str += "<td align=leftb><font size=\"-1\">{value}</font><br/></td>\n".format(value=j)
                            result_str += " </tr>\n"
                        else:
                            for j in new:
                                if re.match(r"(http://.*|https://.*)", j.strip(), re.I):
                                    result_str += "<td><font size=\"-1\"><a href={value}>link</a></font><br/></td>\n".format(
                                        value=j)
                                else:
                                    result_str += "<td><font size=\"-1\">{value}</font><br/></td>\n".format(value=j)
                            result_str += " </tr>\n"
                result_str += "</table>"
            result_str += "</table>"

        insert_after(dst, "<!--ADD_NEW_MODULE-->", result_str)


def parse_csv_para(para):
    csv_list = []
    if para:
        for i in para:
            if os.path.isfile(i) and i.strip().endswith(".csv") and os.path.exists(i):
                csv_list.append(i)
            elif os.path.isdir(i):
                for j in os.listdir(i):
                    if os.path.isfile(i) and i.endswith(".csv") and os.path.exists(i):
                        csv_list.append(i)
            else:
                print "Invalid parameter [%s]" % i
    return csv_list


def parse_name_of_html(dir, prefix):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    if dir:
        if os.path.exists(dir):
            dir = os.path.abspath(dir)
        else:
            dir = os.getcwd()
            dir = os.path.abspath(dir)

    path = os.path.join(dir, prefix + timestamp + ".html")
    return path


parser = argparse.ArgumentParser()
parser.add_argument('-s', '--subject', type=str, default="System Test Report",
                    help='title of email and report, default is System Test Report')
parser.add_argument('-d', '--dir', type=str, default=".", help='set dir to save the html, default is current folder')
parser.add_argument('-p', '--prefix', type=str, default="Report_upstream_",
                    help='the prefix of the new html file name, the name will add timestamp, eg Report_upstream_2017-12-16_00-31-59.html  ')
parser.add_argument('csvfiles', type=str, nargs='+', help='csv file path list or dir of csv files')

if __name__ == '__main__':
    args = parser.parse_args()
    csv_list = parse_csv_para(args.csvfiles)
    new = parse_name_of_html(args.dir, args.prefix)
    write_html(new, csv_list, subject="ARMv8 Upstream Kernel Test report")
